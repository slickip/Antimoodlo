{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://37.220.83.144:8080/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n  // Добавляем withCredentials если API требует куки/сессии\n  // withCredentials: true\n});\n\n// Интерцептор для авторизации\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Обработка ошибок\napi.interceptors.response.use(response => response, error => {\n  if (error.response) {\n    console.error('API Error:', error.response.status, error.response.data);\n  } else if (error.request) {\n    console.error('API Error: No response received', error.request);\n  } else {\n    console.error('API Error:', error.message);\n  }\n  return Promise.reject(error);\n});\nexport default {\n  // Работа с тестами\n  getQuizzes() {\n    return api.get('/Quizzes');\n  },\n  getQuiz(id) {\n    return api.get(`/Quizzes/${id}`);\n  },\n  createQuiz(quizData) {\n    return api.post('/Quizzes', quizData);\n  },\n  updateQuiz(id, quizData) {\n    return api.put(`/Quizzes/${id}`, quizData);\n  },\n  deleteQuiz(id) {\n    return api.delete(`/Quizzes/${id}`);\n  },\n  // Работа с вопросами\n  getQuestions(quizId) {\n    return api.get(`/Quizzes/${quizId}/questions`);\n  },\n  getQuestion(questionId) {\n    return api.get(`/Questions/${questionId}`);\n  },\n  createQuestion(quizId, questionData) {\n    return api.post(`/Quizzes/${quizId}/questions`, questionData);\n  },\n  updateQuestion(questionId, questionData) {\n    return api.put(`/Questions/${questionId}`, questionData);\n  },\n  deleteQuestion(questionId) {\n    return api.delete(`/Questions/${questionId}`);\n  },\n  // Работа с вариантами ответов\n  getOptions(questionId) {\n    return api.get(`/Questions/${questionId}/options`);\n  },\n  createOption(questionId, optionData) {\n    return api.post(`/Questions/${questionId}/options`, optionData);\n  },\n  updateOption(optionId, optionData) {\n    return api.put(`/Options/${optionId}`, optionData);\n  },\n  deleteOption(optionId) {\n    return api.delete(`/Options/${optionId}`);\n  },\n  // Работа с правильными ответами\n  getCorrectAnswers(questionId) {\n    return api.get(`/Questions/${questionId}/answers/correct`);\n  },\n  addCorrectAnswer(questionId, answerData) {\n    return api.post(`/Questions/${questionId}/answers/correct`, answerData);\n  },\n  deleteCorrectAnswer(answerId) {\n    return api.delete(`/Answers/correct/${answerId}`);\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","console","status","data","message","Promise","reject","getQuizzes","get","getQuiz","id","createQuiz","quizData","post","updateQuiz","put","deleteQuiz","delete","getQuestions","quizId","getQuestion","questionId","createQuestion","questionData","updateQuestion","deleteQuestion","getOptions","createOption","optionData","updateOption","optionId","deleteOption","getCorrectAnswers","addCorrectAnswer","answerData","deleteCorrectAnswer","answerId"],"sources":["C:/Users/bagda/moodle/src/services/Api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://37.220.83.144:8080/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  // Добавляем withCredentials если API требует куки/сессии\r\n  // withCredentials: true\r\n});\r\n\r\n// Интерцептор для авторизации\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Обработка ошибок\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response) {\r\n      console.error('API Error:', error.response.status, error.response.data);\r\n    } else if (error.request) {\r\n      console.error('API Error: No response received', error.request);\r\n    } else {\r\n      console.error('API Error:', error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default {\r\n  // Работа с тестами\r\n  getQuizzes() {\r\n    return api.get('/Quizzes');\r\n  },\r\n  getQuiz(id) {\r\n    return api.get(`/Quizzes/${id}`);\r\n  },\r\n  createQuiz(quizData) {\r\n    return api.post('/Quizzes', quizData);\r\n  },\r\n  updateQuiz(id, quizData) {\r\n    return api.put(`/Quizzes/${id}`, quizData);\r\n  },\r\n  deleteQuiz(id) {\r\n    return api.delete(`/Quizzes/${id}`);\r\n  },\r\n\r\n  // Работа с вопросами\r\n  getQuestions(quizId) {\r\n    return api.get(`/Quizzes/${quizId}/questions`);\r\n  },\r\n  getQuestion(questionId) {\r\n    return api.get(`/Questions/${questionId}`);\r\n  },\r\n  createQuestion(quizId, questionData) {\r\n    return api.post(`/Quizzes/${quizId}/questions`, questionData);\r\n  },\r\n  updateQuestion(questionId, questionData) {\r\n    return api.put(`/Questions/${questionId}`, questionData);\r\n  },\r\n  deleteQuestion(questionId) {\r\n    return api.delete(`/Questions/${questionId}`);\r\n  },\r\n\r\n  // Работа с вариантами ответов\r\n  getOptions(questionId) {\r\n    return api.get(`/Questions/${questionId}/options`);\r\n  },\r\n  createOption(questionId, optionData) {\r\n    return api.post(`/Questions/${questionId}/options`, optionData);\r\n  },\r\n  updateOption(optionId, optionData) {\r\n    return api.put(`/Options/${optionId}`, optionData);\r\n  },\r\n  deleteOption(optionId) {\r\n    return api.delete(`/Options/${optionId}`);\r\n  },\r\n\r\n  // Работа с правильными ответами\r\n  getCorrectAnswers(questionId) {\r\n    return api.get(`/Questions/${questionId}/answers/correct`);\r\n  },\r\n  addCorrectAnswer(questionId, answerData) {\r\n    return api.post(`/Questions/${questionId}/answers/correct`, answerData);\r\n  },\r\n  deleteCorrectAnswer(answerId) {\r\n    return api.delete(`/Answers/correct/${answerId}`);\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}